// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum TYPE_MATKUL {
  WAJIB
  PILIHAN
}

enum ASISTEN_LAB_STATUS {
  DITOLAK
  PENDING
  DISETUJUI
}

enum NILAI_MATAKULIAH {
  A
  AB
  B
  BC
  C
  D
  E
}

model User {
  id          String   @id
  fullName    String
  email       String   @unique
  password    String
  userLevelId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userLevel UserLevels @relation(fields: [userLevelId], references: [id])
}

model UserLevels {
  id         String       @id
  name       String       @unique
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  users      User[]
  acl        Acl[]
  Dosen      Dosen[]
  AsistenLab AsistenLab[]
  Mahasiswa  Mahasiswa[]
}

model Features {
  id        String   @id
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  actions Actions[]
  acl     Acl[]
}

model Actions {
  id          String   @id
  name        String
  namaFeature String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  feature Features @relation(fields: [namaFeature], references: [name])

  @@unique([namaFeature, name])
}

model Acl {
  id          String   @id
  namaFeature String
  namaAction  String
  userLevelId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  feature   Features   @relation(fields: [namaFeature], references: [name])
  userLevel UserLevels @relation(fields: [userLevelId], references: [id])

  @@unique([namaFeature, namaAction, userLevelId])
}

model DosenPengampuMK {
  id           String     @id
  dosenId      String
  matakuliahId String
  dosen        Dosen?     @relation(fields: [dosenId], references: [id])
  matakuliah   Matakuliah @relation(fields: [matakuliahId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Matakuliah {
  id                    String                  @id
  nama                  String
  kode                  String                  @unique
  type                  TYPE_MATKUL
  sks                   Int
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  dosenPengampuMK       DosenPengampuMK[]
  jadwal                Jadwal[]
  PendaftaranAsistenLab PendaftaranAsistenLab[]
}

model Dosen {
  id          String   @id
  nama        String
  email       String
  password    String
  nip         String   @unique
  userLevelId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userLevel UserLevels @relation(fields: [userLevelId], references: [id])

  dosenPengampuMK DosenPengampuMK[]
  jadwalDosen     Jadwal[]
  absensi         Absensi[]
}

model AsistenLab {
  id          String    @id
  mahasiswaId String
  jadwalId    String
  semester    Int
  tahun       String
  userLevelId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  userLevel UserLevels @relation(fields: [userLevelId], references: [id])

  Mahasiswa Mahasiswa[]
  Jadwal    Jadwal[]
}

model PendaftaranAsistenLab {
  id             String             @id
  mahasiswaId    String
  matakuliahId   String
  nilaiTeori     NILAI_MATAKULIAH
  nilaiPraktikum NILAI_MATAKULIAH
  nilaiAkhir     NILAI_MATAKULIAH
  status         ASISTEN_LAB_STATUS @default(PENDING)
  keterangan     String?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  mahasiswa  Mahasiswa  @relation(fields: [mahasiswaId], references: [id])
  matakuliah Matakuliah @relation(fields: [matakuliahId], references: [id])
}

model Mahasiswa {
  id          String   @id
  nama        String
  npm         String   @unique
  semester    Int
  password    String
  tahunMasuk  String
  isActive    Boolean
  userLevelId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  asistenLab   AsistenLab? @relation(fields: [asistenLabId], references: [id])
  asistenLabId String?

  jadwal  Jadwal[]
  Absensi Absensi[]

  userLevel             UserLevels              @relation(fields: [userLevelId], references: [id])
  PendaftaranAsistenLab PendaftaranAsistenLab[]
}

enum SEMESTER {
  GANJIL
  GENAP
}

model Jadwal {
  id           String    @id
  hari         String
  shiftId      String
  ruanganId    String
  dosenId      String
  semester     SEMESTER
  tahun        String
  isOverride   Boolean?
  asistenLabId String?
  mahasiswaId  String?
  matakuliahId String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  shift      Shift               @relation(fields: [shiftId], references: [id])
  ruangan    RuanganLaboratorium @relation(fields: [ruanganId], references: [id])
  dosen      Dosen               @relation(fields: [dosenId], references: [id])
  asisten    AsistenLab?         @relation(fields: [asistenLabId], references: [id])
  mahasiswa  Mahasiswa?          @relation(fields: [mahasiswaId], references: [id])
  matakuliah Matakuliah          @relation(fields: [matakuliahId], references: [id])

  Absensi Absensi?
  Meeting Meeting[]
}

model Meeting {
  id        String   @id
  jadwalId  String?
  tanggal   String
  pertemuan Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  jadwal Jadwal? @relation(fields: [jadwalId], references: [id])
}

model RuanganLaboratorium {
  id                 String    @id
  nama               String
  lokasi             String
  namaKepalaLab      String?
  nipKepalaLab       String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  deletedAt          DateTime?
  histroyKepalaLabId String?

  historyKepalaLab HistoryKepalaLab?  @relation("currentLab", fields: [histroyKepalaLabId], references: [id])
  historyLabs      HistoryKepalaLab[] @relation("historyLabs")

  jadwal Jadwal[]
}

model HistoryKepalaLab {
  id           String   @id
  nama         String
  nip          String
  ruanganLabId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  currentLab RuanganLaboratorium[] @relation("currentLab")
  ruanganLab RuanganLaboratorium?  @relation("historyLabs", fields: [ruanganLabId], references: [id])
}

model Holidays {
  id        String   @id
  day       String
  month     String
  year      String
  date      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Absensi {
  id          String    @id
  mahasiswaId String
  jadwalId    String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  mahasiswa Mahasiswa @relation(fields: [mahasiswaId], references: [id])
  jadwal    Jadwal    @relation(fields: [jadwalId], references: [id])
  Dosen     Dosen?    @relation(fields: [dosenId], references: [id])
  dosenId   String?
}

model Shift {
  id        String   @id
  startTime String
  endTime   String
  isActive  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  jadwal Jadwal[]
}
